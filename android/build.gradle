buildscript {
    ext {
        buildToolsVersion = "34.0.0"
        minSdkVersion = 23
        compileSdkVersion = 35
        targetSdkVersion = 35
        kotlinVersion = "1.9.24"
        gradleVersion = "8.8.0"
        firebaseBomVersion = "32.7.0"
        ndkVersion = "25.2.9519653"
        reactNativeVersion = "0.75.5"
        hermesEngineVersion = "0.75.5"
        androidGradlePluginVersion = "8.6.0"
        publishing_version = '0.13.4'
        cmake_version = "4.1.0"
    }

    repositories {
        google()
        mavenCentral()
    }

    dependencies {
        classpath("com.android.tools.build:gradle:$androidGradlePluginVersion")
        classpath("com.google.gms:google-services:4.4.2")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
        classpath("com.google.firebase:firebase-crashlytics-gradle:2.9.9")
    }
}

project.ext.react = [
    enableHermes: true,
    nodeExecutableAndArgs: ["C:/Program Files/nodejs/node.exe"]
]

// *** Definizione immediata di libs dal version catalog ***
// Spostato qui, fuori da qualsiasi blocco, per essere subito disponibile
def libsCatalog = null
def versionCatalogsExt = rootProject.extensions.findByName("versionCatalogs")
if (versionCatalogsExt != null) {
    libsCatalog = versionCatalogsExt.find("libs").orElse(null)
}
if (libsCatalog != null) {
    rootProject.ext.libs = libsCatalog
}

allprojects {
    repositories {
        // Lasciati commentati se non servono
    }

    // Forziamo PATH per trovare sdkmanager
    tasks.withType(JavaCompile).configureEach {
        sourceCompatibility = "17"
        targetCompatibility = "17"
        javaCompiler = javaToolchains.compilerFor {
            languageVersion = JavaLanguageVersion.of(17)
        }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            jvmTarget = "17"
        }
    }

    task printNodePath {
        doLast {
            println "REACT_NATIVE_NODE_EXECUTABLE: ${project.findProperty('REACT_NATIVE_NODE_EXECUTABLE') ?: 'null'}"
            println "PATH env: " + System.getenv("PATH")
        }
    }
}

gradle.projectsEvaluated {
    tasks.matching { true }.all { task ->
        if (task.hasProperty("environment")) {
            def newPath = System.getenv("PATH") + ";C:\\Users\\misti\\AppData\\Local\\Android\\Sdk\\cmdline-tools\\latest\\bin"
            task.environment "PATH", newPath
            task.environment "ANDROID_SDK_ROOT", "C:\\Users\\misti\\AppData\\Local\\Android\\Sdk"
            task.environment "ANDROID_HOME", "C:\\Users\\misti\\AppData\\Local\\Android\\Sdk"
        }
    }
}


subprojects { subproject ->
    afterEvaluate {
        if (subproject.hasProperty("android")) {
            subproject.android {
                compileSdkVersion rootProject.ext.compileSdkVersion
                buildToolsVersion rootProject.ext.buildToolsVersion
                ndkVersion rootProject.ext.ndkVersion

                defaultConfig {
                    minSdkVersion rootProject.ext.minSdkVersion
                    targetSdkVersion rootProject.ext.targetSdkVersion
                }

                compileOptions {
                    sourceCompatibility = JavaVersion.VERSION_17
                    targetCompatibility = JavaVersion.VERSION_17
                }

                packagingOptions {
                    excludes += ["**/bcprov-jdk*.jar"]
                }
            }

            subproject.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
                kotlinOptions {
                    jvmTarget = "17"
                    freeCompilerArgs += ["-Xjvm-default=all"]
                }
            }
        }

        // ESCLUSIONE fresco-middleware a livello di configurazioni:
        subproject.configurations.all {
            exclude group: 'com.facebook.fresco.middleware', module: 'fresco-middleware'
        }

        subproject.configurations.all {
            resolutionStrategy {
                eachDependency { details ->
                    if (details.requested.group == "com.facebook.react") {
                        if (details.requested.name == "react-android") {
                            details.useVersion rootProject.ext.reactNativeVersion
                        }
                        if (details.requested.name == "hermes-android") {
                            details.useVersion rootProject.ext.hermesEngineVersion
                        }
                    }
                }

                force("org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.kotlinVersion}")
                force("org.jetbrains.kotlin:kotlin-reflect:${rootProject.ext.kotlinVersion}")
                force("org.jetbrains.kotlin:kotlin-compiler-embeddable:${rootProject.ext.kotlinVersion}")
            }
        }

        if (subproject.name == "react-native-firebase_app") {
            subproject.tasks.matching { it.name == "copyDebugJniLibsProjectAndLocalJars" }.configureEach {
                dependsOn(":react-native-firebase_app:stripDebugDebugSymbols")
            }
        }

        // Inject `libs.androidx.annotation` se manca (es. in hermes-engine)
        if (rootProject.ext.has("libs")) {
            def annotationLib = rootProject.ext.libs.findLibrary("androidx-annotation")
            if (annotationLib.isPresent()) {
                if (subproject.configurations.findByName("implementation") != null) {
                    subproject.dependencies.add("implementation", annotationLib.get())
                } else {
                    // fallback, se serve, ad esempio "api" o "compileOnly"
                    if (subproject.configurations.findByName("api") != null) {
                        subproject.dependencies.add("api", annotationLib.get())
                    } else {
                        println "Nessuna configurazione implementation o api trovata in ${subproject.name}"
                    }
                }
            }
        }
    }
}




