apply plugin: "com.android.application"
apply plugin: "com.google.gms.google-services"
apply plugin: "com.google.firebase.crashlytics"
apply plugin: "org.jetbrains.kotlin.android"

project.ext.react = [
    enableHermes: true,
    bundleInDebug: false,
    devDisabledInRelease: true,
    hermesCommand: "../../node_modules/hermes-engine/%OS-BIN%/hermesc",
    bundleCommand: "ram-bundle",
    extraPackagerArgs: ["--indexed-ram-bundle"]
]

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion rootProject.ext.ndkVersion
    namespace "fit.app.mobile"

    defaultConfig {
        applicationId "fit.app.mobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        resValue "string", "build_config_package", "fit.app.mobile"
        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        ndkVersion rootProject.ext.ndkVersion
    }

    signingConfigs {
        debug {
            storeFile file("my-release-key.keystore")
            storePassword "Cl1mb!ng.Ks"
            keyAlias "my-key-alias"
            keyPassword "Cl1mb!ng.KS"
        }
        release {
            storeFile file('fitapp-release-key.keystore')
            storePassword System.getenv("FITAPP_STORE_PASSWORD") ?: ""
            keyAlias System.getenv("FITAPP_KEY_ALIAS") ?: ""
            keyPassword System.getenv("FITAPP_KEY_PASSWORD") ?: ""
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
            ext.enableCrashlytics = false
            resValue "string", "CodePushDeploymentKey", '""'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
            zipAlignEnabled true
            debuggable false
            resValue "string", "CodePushDeploymentKey", '""'

            firebaseCrashlytics {
                strippedNativeLibsDir "build/intermediates/stripped_native_libs/release/out/lib"
                unstrippedNativeLibsDir "build/intermediates/merged_native_libs/release/out/lib"
            }
        }
    }

    packagingOptions {
        exclude "**/bcprov-jdk*.jar"
        exclude "**/libjsc.so"
        exclude "**/libfbjni.so"
        pickFirst "**/libc++_shared.so"
        exclude "META-INF/**"
        exclude "**/org/bouncycastle/**"
    }

    aaptOptions {
        ignoreAssetsPattern "!*.zip:!*.so:!*/armeabi-v7a/*:!*/arm64-v8a/*"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += [
            "-Xskip-metadata-version-check",
            "-Xsuppress-version-warnings",
            "-Xallow-result-return-type"
        ]
        apiVersion = "1.8"
        languageVersion = "1.8"
    }

    buildFeatures {
        buildConfig true
    }

    sourceSets {
        getByName("main").java.srcDirs(
            "src/main/java",
            "src/main/kotlin"
        )
    }
}

dependencies {
    // React Native Android come modulo locale (da node_modules)
    implementation project(":packages:react-native:ReactAndroid")
    implementation "com.facebook.react:react-native:0.75.1"

    // Hermes (versione Maven, modifica se vuoi Hermes locale)
    implementation("com.facebook.react:hermes-android:${rootProject.ext.hermesEngineVersion}") {
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
        exclude group: 'org.bouncycastle', module: 'bcprov-jdk18on'
    }

    // Firebase BOM - opzionale, se usi moduli nativi per Crashlytics/Functions
    implementation platform("com.google.firebase:firebase-bom:${rootProject.ext.firebaseBomVersion}")

    // Firebase moduli React Native come progetti locali
    implementation project(":react-native-firebase_app")
    implementation project(":react-native-firebase_auth")
    implementation project(":react-native-firebase_firestore")

    // Se Crashlytics NDK e Functions non li usi come moduli locali, lasciali come Maven:
    implementation "com.google.firebase:firebase-crashlytics-ndk"
    implementation "com.google.firebase:firebase-functions"


    // Librerie AndroidX e altre utilit√†
    implementation "androidx.core:core-ktx:1.12.0"
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation "androidx.multidex:multidex:2.0.1"

    // Moduli React Native nativi locali
    implementation project(":react-native-vector-icons")
    implementation project(":react-native-sqlite-storage")
}


configurations.all {
    resolutionStrategy {
        // Forza versioni Kotlin coerenti (1.9.22)
        force(
            "org.jetbrains.kotlin:kotlin-stdlib:1.9.22",
            "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.22",
            "org.jetbrains.kotlin:kotlin-reflect:1.9.22",
            "org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.9.22"
        )
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        apiVersion = "1.8"
        languageVersion = "1.8"
    }
}

apply from: file("../../node_modules/react-native-vector-icons/fonts.gradle")
apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle")
applyNativeModulesAppBuildGradle(project)
