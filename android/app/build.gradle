apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.parentFile.absolutePath

// Configurazione React Native
react {
    entryFile = file("${projectRoot}/index.js")
    reactNativeDir = file("${projectRoot}/node_modules/react-native")
    codegenDir = file("${projectRoot}/node_modules/@react-native/codegen")

    // Configurazione del bundle
    bundleCommand = "ram-bundle"
    extraPackagerArgs = ["--indexed-ram-bundle", "--max-workers=2"]
}

// Configurazione Hermes (fuori dal blocco react)
project.ext.react = [
    enableHermes: true,  // Imposta a false per disabilitare Hermes
    hermesFlags: ["-O", "-output-source-map"]
]

android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace 'com.example.fitapp'

    defaultConfig {
        applicationId 'com.example.fitapp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0.0"
        resValue "string", "build_config_package", "com.example.fitapp"
        multiDexEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        release {
            // Configura qui il tuo keystore release
            // storeFile file('my-release-key.keystore')
            // storePassword 'yourpassword'
            // keyAlias 'yourkeyalias'
            // keyPassword 'yourkeypassword'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            debuggable true
        }
        release {
            signingConfig signingConfigs.debug // Cambia con signingConfigs.release per build finali
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            zipAlignEnabled true
        }
    }

    packagingOptions {
        pickFirst '**/libjsc.so'
        pickFirst '**/libhermes.so'
        pickFirst '**/libc++_shared.so'
        exclude 'META-INF/proguard/androidx-annotations.pro'
        exclude 'lib/x86/libsqlite.so'
        exclude 'lib/x86_64/libsqlite.so'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
    }
}

dependencies {
    implementation("com.facebook.react:react-android")

    // Configurazione condizionale per Hermes
    def enableHermes = project.ext.react.get("enableHermes", false)
    if (enableHermes) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation 'org.webkit:android-jsc:+'
    }

    // Dipendenze per immagini
    implementation("com.facebook.fresco:fresco:2.6.0")
    implementation("com.facebook.fresco:animated-gif:2.6.0")
    implementation("com.facebook.fresco:webpsupport:2.6.0")

    // Dipendenze aggiuntive
    implementation "androidx.core:core-ktx:1.10.1"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.9.10"
}

// Applica i moduli nativi solo per versioni di React Native < 0.75
if (getRNVersion() < versionToNumber(0, 75, 0)) {
    apply from: new File(["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim(), "../native_modules.gradle")
    applyNativeModulesAppBuildGradle(project)
}

// Helper function per la versione RN (aggiungi in cima al file se non presente)
static def versionToNumber(major, minor, patch) {
    return patch * 100 + minor * 10000 + major * 1000000
}

def getRNVersion() {
    def versionOutput = new ByteArrayOutputStream()
    exec {
        workingDir(projectDir)
        commandLine("node", "-e", "console.log(require('react-native/package.json').version);")
        standardOutput = versionOutput
    }
    def version = versionOutput.toString().trim()
    def (major, minor, patch) = version.tokenize('.').collect { it.toInteger() }
    return versionToNumber(major, minor, patch)
}