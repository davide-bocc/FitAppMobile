apply plugin: 'com.android.application'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'expo-updates'



android {
    namespace 'com.example.fitapp'
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId 'com.example.fitapp'
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", "false"
        buildConfigField "boolean", "IS_HERMES_ENABLED", "true"
        buildConfigField "boolean", "REACT_NATIVE_UNSTABLE_USE_RUNTIME_SCHEDULER_ALWAYS", "false"

        ndk {
            abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }
    }

    packagingOptions {
        pickFirst '**/libnode.so'
        exclude '**/libjsc.so'
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
        release {
            storeFile file('my-release-key.keystore')
            storePassword 'Cl1mb!ng.Ks'  // Ricorda di proteggere le tue password, evita di committarle in repo pubblici
            keyAlias 'my-key-alias'
            keyPassword 'Cl1mb!ng.Ks'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            manifestPlaceholders = [usesCleartextTraffic: "true"]
            matchingFallbacks = ['debug']
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            zipAlignEnabled true
        }
    }

    sourceSets {
        main {
            assets.srcDirs += ['src/main/assets']
            jniLibs.srcDirs += ['src/main/jniLibs']
        }
    }
}

react {
    entryFile = file("../../App.js").exists() ? "../../App.js" : "../../index.js"

    reactNativeDir = new File(
        ["node", "--print", "require.resolve('react-native/package.json')"]
            .execute(null, rootDir)
            .text
            .trim()
    ).parentFile.absoluteFile

    hermesCommand = new File(
        reactNativeDir,
        "sdks/hermesc/${System.getProperty('os.name').toLowerCase().contains('windows') ? 'win64' : 'linux64'}/hermesc"
    ).absolutePath
}

dependencies {
    implementation "com.facebook.react:react-android"

    def frescoVersion = rootProject.ext.frescoVersion

    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "com.facebook.fresco:imagepipeline-okhttp3:$frescoVersion"

    debugImplementation("com.facebook.flipper:flipper:0.125.0")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:0.125.0") {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:0.125.0")

    implementation "com.facebook.react:hermes-android"
}

// Importa native_modules.gradle dal pacchetto CLI React Native
apply from: new File(
    ["node", "--print", "require.resolve('@react-native-community/cli-platform-android/package.json')"]
        .execute(null, rootDir)
        .text
        .trim(),
    "../native_modules.gradle"
)

applyNativeModulesAppBuildGradle(project)
